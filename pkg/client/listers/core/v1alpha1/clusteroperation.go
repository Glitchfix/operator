/*
Copyright 2019 Openstorage.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/libopenstorage/operator/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterOperationLister helps list ClusterOperations.
type ClusterOperationLister interface {
	// List lists all ClusterOperations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterOperation, err error)
	// ClusterOperations returns an object that can list and get ClusterOperations.
	ClusterOperations(namespace string) ClusterOperationNamespaceLister
	ClusterOperationListerExpansion
}

// clusterOperationLister implements the ClusterOperationLister interface.
type clusterOperationLister struct {
	indexer cache.Indexer
}

// NewClusterOperationLister returns a new ClusterOperationLister.
func NewClusterOperationLister(indexer cache.Indexer) ClusterOperationLister {
	return &clusterOperationLister{indexer: indexer}
}

// List lists all ClusterOperations in the indexer.
func (s *clusterOperationLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterOperation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterOperation))
	})
	return ret, err
}

// ClusterOperations returns an object that can list and get ClusterOperations.
func (s *clusterOperationLister) ClusterOperations(namespace string) ClusterOperationNamespaceLister {
	return clusterOperationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterOperationNamespaceLister helps list and get ClusterOperations.
type ClusterOperationNamespaceLister interface {
	// List lists all ClusterOperations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterOperation, err error)
	// Get retrieves the ClusterOperation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClusterOperation, error)
	ClusterOperationNamespaceListerExpansion
}

// clusterOperationNamespaceLister implements the ClusterOperationNamespaceLister
// interface.
type clusterOperationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterOperations in the indexer for a given namespace.
func (s clusterOperationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterOperation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterOperation))
	})
	return ret, err
}

// Get retrieves the ClusterOperation from the indexer for a given namespace and name.
func (s clusterOperationNamespaceLister) Get(name string) (*v1alpha1.ClusterOperation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusteroperation"), name)
	}
	return obj.(*v1alpha1.ClusterOperation), nil
}
